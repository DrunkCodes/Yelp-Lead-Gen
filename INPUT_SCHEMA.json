{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Yelp Scraper Input",
  "description": "Provide either keyword+location or a direct Yelp search URL. Advanced arrays are optional.",
  "type": "object",
  "required": [],
  "oneOf": [
    { "required": ["keyword", "location"] },
    { "required": ["searchUrl"] },
    { "required": ["queries"] },
    { "required": ["searchUrls"] },
    { "required": ["keywords", "locations"] }
  ],
  "properties": {
    "keyword": {
      "type": "string",
      "title": "Keyword",
      "description": "e.g., plumbers, dentists"
    },
    "location": {
      "type": "string",
      "title": "Location",
      "description": "e.g., Austin, TX"
    },
    "searchUrl": {
      "type": "string",
      "format": "uri",
      "title": "Yelp search URL",
      "description": "Direct Yelp search URL (overrides keyword/location)"
    },
    "queries": {
      "type": "array",
      "description": "Array of query objects, each with 'keyword' and 'location'.",
      "title": "Query objects",
      "items": {
        "type": "object",
        "properties": {
          "keyword": {
            "type": "string",
            "title": "Keyword",
            "description": "e.g., plumbers"
          },
          "location": {
            "type": "string",
            "title": "Location",
            "description": "e.g., Austin, TX"
          }
        },
        "required": ["keyword", "location"]
      }
    },
    "keywords": {
      "type": "array",
      "description": "List of keywords to combine with locations (cross-product if multiple).",
      "title": "Keywords list",
      "items": { "type": "string" }
    },
    "locations": {
      "type": "array",
      "description": "List of locations to combine with keywords (cross-product if multiple).",
      "title": "Locations list",
      "items": { "type": "string" }
    },
    "searchUrls": {
      "type": "array",
      "description": "Direct Yelp search URLs to process.",
      "title": "Yelp search URLs",
      "items": { "type": "string", "format": "uri" }
    },
    "numBusinesses": {
      "type": "integer",
      "title": "Businesses to scrape",
      "description": "Max 500",
      "default": 50,
      "minimum": 1,
      "maximum": 500
    },
    "concurrency": {
      "type": "integer",
      "title": "Concurrency",
      "description": "Clamped 3â€“5 for stability",
      "default": 5,
      "minimum": 3,
      "maximum": 5
    },
    "naturalNavigation": {
      "type": "boolean",
      "title": "Use natural navigation via search engines",
      "default": false
    },
    "perBusinessIsolation": {
      "type": "boolean",
      "title": "Isolate browser context per business",
      "default": false
    },
    "entryFlowRatios": {
      "type": "string",
      "title": "Entry flow ratios",
      "description": "google:0.6,direct:0.3,bing:0.1",
      "default": "google:0.6,direct:0.3,bing:0.1"
    },
    "debugSnapshot": {
      "type": "boolean",
      "title": "Save HTML snapshots for debugging",
      "default": false
    },
    "grokModel": {
      "type": "string",
      "title": "Grok model",
      "description": "e.g., grok-2",
      "default": "grok-2"
    },
    "country": {
      "type": "string",
      "title": "Proxy country",
      "description": "Two-letter code, e.g., US"
    },
    "captchaTimeoutSeconds": {
      "type": "integer",
      "title": "CAPTCHA timeout (seconds)",
      "default": 300,
      "minimum": 60,
      "maximum": 1200
    },
    "emailMaxContactPages": {
      "type": "integer",
      "title": "Max contact pages to crawl",
      "default": 10,
      "minimum": 1,
      "maximum": 20
    }
  }
}
